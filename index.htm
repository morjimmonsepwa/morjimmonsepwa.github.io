<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>PWA&FISICA</title>
    <script src="js/registraServiceWorker.js"></script>
    <!-- Ícono para la página web. Debe ponerse en la raíz de la página. -->
    <link rel="icon" sizes="32x32" href="favicon.ico">
    <!-- Color de la barra de navegación de Chrome en dispositivos móviles. -->
    <meta name="theme-color" content="#81d4f4">
    <!-- Configuración de la PWA: Chrome y Edge. -->
    <link rel="manifest" href="manifest.json">

    <!-- Configuración para Web Clip en Safari. -->
    <meta name="apple-mobile-web-app-title" content="dmppwa">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <link rel="apple-touch-icon" href="img/icono2048.png">
    <link rel="apple-touch-icon" sizes="256x256" href="img/icono256.png">
    <link rel="apple-touch-icon" sizes="1024x1024" href="img/icono1024.png">
    <link rel="apple-touch-icon" sizes="2048x2048" href="img/icono2048.png">
    <script type="module" src="cmp/mi-footer.js"></script>
    <link rel="stylesheet" href="css/estilos.css">
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap"
      rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Material+Icons"
      rel="stylesheet">
      <style>
        /* :root
         * Elemento raíz del documento. En este caso corresponde al elemento html.
         */
        :root {
          /* custom properties
           * Valores que puede definir el desarrollador y reutilizar en todas las
           * definiciones de estilos. Deben iniciar con -- y colocarse en el
           * elemento raíz. */
          --color-primario: black;
          --color-primario-fondo: #81d4fa;
          --color-contenido: black;
          --color-contenido-fondo: white;
          --color-control-sin-foco: gray;
          --color-control-con-foco: #03a9f4;
          --color-control-error: #b00020;
          --color-control-fondo: #eeeeee;
          --color-active: #4646462c;
          /** Los 2 primeros fonts son para apple y "Roboto" es para Android. */
          --font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;
          /* Uso de la custom property "--color-contenido". */
          color: var(--color-contenido);
          background-color: var(--color-contenido-fondo);
          font-family: var(--font-family);
        }
  
        body {
          margin: 0;
        }
  
        header {
          color: var(--color-primario);
          background-color: var(--color-primario-fondo);
          position: sticky;
          top: 0;
          z-index: 1;
        }
  
        .toolbar {
          display: flex;
          padding: 1rem;
          position: relative;
        }
  
        /* selector anidado: .toolbar h1
         * se aplica a todos los h1 que estén dentro de un elemento de la clase
         * "toolbar" */
        .toolbar h1 {
          margin: 0 auto 0 0;
          padding: 0;
          font-size: 1.25rem;
        }
  
        body.ios .toolbar h1 {
          margin: 0 auto 0 auto;
        }
  
        body.ios .toolbar .acciones {
          position: absolute;
          top: 1rem;
          right: 1rem;
        }
  
        .toolbar button {
          border: none;
          padding: 0;
          margin: 0 0 0 1.5rem;
          background-color: transparent;
          /* Quita una especie de borde usualmente usado para indicar que el
           * elemento tiene el foco. */
          outline: none;
        }
  
        .toolbar button:active {
          background-color: var(--color-active);
        }
  
        .contenido {
          padding: 0 1rem;
        }
  
        campo-dinámico {
          display: block;
          position: relative;
          color: var(--color-control-sin-foco);
          background-color: var(--color-control-fondo);
          border-top-left-radius: 4px;
          border-top-right-radius: 4px;
          margin: 1rem 0;
          padding: 1.25rem 0 0 0;
        }
  
        campo-dinámico label {
          position: absolute;
          top: 1.75rem;
          left: 1rem;
          font-size: 1rem;
          color: var(--color-control-sin-foco);
          /* transition: 0.7s ease-in
           * Cuando algún atributo cambie, lo hace lentamente
           * 0.7s
           * La transición tarda 0.7 segundos
           * ease-in
           * La transición inicia lento y luego acelera */
          transition: 0.7s ease-in;
        }
  
        /* La misma definición de estilos se aplicaca a 2 selectores diferentes
         * separados por ",":
         * campo-dinámico .control_sin_foco+label
         *   Selecciona a un elemento "label" ubicado inmediatamente después de un
         *   elemento hermano de la clase "control_sin_foco" y ambos elementos
         *   están dentro de un custom element de tipo "campo-dinámico".
         * campo-dinámico :focus+label
         *   Selecciona a un elemento "label" ubicado inmediatamente después de un
         *   elemento hermano que tiene el foco del teclado y ambos elementos
         *   están dentro de un custom element de tipo "campo-dinámico". */
        campo-dinámico .control_sin_foco+label,
        campo-dinámico :focus+label {
          top: 0.5rem;
          font-size: 0.75rem;
        }
  
        /* La misma definición de estilos se aplicaca a 3 selectores diferentes
         * separados por ",":
         * campo-dinámico select
         *   Selecciona a un elemento "select" dentro de un custom element de tipo
         *   "campo-dinámico".
         * campo-dinámico input
         *   Selecciona a un elemento "input" dentro de un custom element de tipo
         *   "campo-dinámico".
         * campo-dinámico textarea
         *   Selecciona a un elemento "textarea" dentro de un custom element de
         *   tipo "campo-dinámico".
         *   Un "textarea" es un control de captura de texto de varios renglones.
         */
        campo-dinámico select,
        campo-dinámico input,
        campo-dinámico textarea {
          box-sizing: border-box;
          background-color: transparent !important;
          padding: 0.5rem 1rem 0.5rem 1rem;
          font-size: 1rem;
          font-family: var(--font-family);
          border: none;
          border-bottom: 2px solid var(--color-control-sin-foco);
          resize: none;
          outline: none;
          width: 100%;
          transition: 0.7s ease-in;
        }
  
        /* Ayuda dentro de un campo dinámico. El elemento "small" se usa para
         * comentarios secundarios y se muestra en letras pequeñas. */
        campo-dinámico small {
          display: block;
          height: 1em;
          font-size: 0.75rem;
          padding-left: 1rem;
          background-color: var(--color-contenido-fondo);
          transition: 0.7s ease-in;
        }
  
        campo-dinámico :focus+label {
          color: var(--color-control-con-foco);
        }
  
        campo-dinámico select:focus,
        campo-dinámico input:focus,
        campo-dinámico textarea:focus {
          border-bottom-color: var(--color-control-con-foco);
        }
  
        /* :invalid
         * Pseudoclase para seleccionar elementos que no cumplen las reglas de
         * validación. */
        campo-dinámico select:invalid,
        campo-dinámico input:invalid,
        campo-dinámico textarea:invalid {
          border-bottom-color: var(--color-control-error);
        }
  
        /* campo-dinámico :invalid~small
         *   Selecciona a los elementos "small" que van después de un elemento
         *   hermano inválido y ambos elementos están dentro de un custom element
         *   de tipo "campo-dinámico". */
        campo-dinámico :invalid+label,
        campo-dinámico :invalid~small {
          color: var(--color-control-error);
        }
      </style>
      <script>
        class CampoDinámico extends HTMLElement {
          connectedCallback() {
            this.ganaFoco = this.ganaFoco.bind(this);
            this.pierdeFoco = this.pierdeFoco.bind(this);
            this.addEventListener("focus", this.ganaFoco, true);
            this.addEventListener("focusout", this.pierdeFoco, true);
          }
          get control() {
            return this.querySelector("input,textarea,select");
          }
          ganaFoco() {
            this.control.classList.remove("control_sin_foco");
          }
          pierdeFoco() {
            const control = this.control;
            if (control.value.length === 0) {
              control.classList.remove("control_sin_foco");
            } else {
              control.classList.add("control_sin_foco");
            }
          }
        }
        customElements.define("campo-dinámico", CampoDinámico);
      </script>

    </head>
  <body>
    <h1 style="color:#FF0000";><center>VELOCIDAD-TIEMPO-DISTANCIA</center></h1>
    <p><center>Cuando tiene una tasa de movimiento, tal como "x" pies por "y" segundos,</center></p>
     <p><center>o "x" millas por "y" horas, puede usar la importante relación:</center></p>
     <center><span style="border-image: initial; border: 1px solid blue; ">VELOCIDAD * TIEMPO = DISTANCIA</span></center>
      <p><center>para resolver muchos problemas.</center></p>
      <h3 style="color:#0E6655 ";><center>EJEMPLO PARA SABER COMO UTILIZAR LA APLICACIÓN</center></h3>
       <p><center>Si usted monta su bicicleta a una velocidad de 15 millas por hora en una linea recta,</p>
       <p><center>que tan lejos llegará del lugar de inicio después de 3 horas?</center></p>
        <p><center>--------------------------------------------------------------------------------------------------</center></p>
        <p><center>La velocidad es de 15 millas/1 hora, y el tiempo es de 3 horas.</center></p>
        <h3 style="color:#BA4A00  ";><center>MULTIPLIQUE:</center></h3>
        <center><span style="border-image: initial; border: 1px solid blue; ">15 millas * 3 horas = 45 millas</span></center>
<p> </p>
    <form action="javascript:;">
      <header>
        <div class="toolbar">
          <h1>PWA&FÍSICA</h1>
          <span class="acciones">
            <button><span class="material-icons">save</span></button>
          </span>
        </div>
      </header>
      <div class="contenido">
        <p>Recuerda guiarte del ejemplo para saber resolver tus problemas sobre Velocidad-Tiempo-Distancia<output id="agent"></output></p>
        <campo-dinámico>
          <input type="text" id="numero1" required>
          <label for="numero1">Primer valor</label>
          <small> </small>
        </campo-dinámico>
        <campo-dinámico>
          <input type="text" id="numero2" required>
          <!-- <input id="email" type="email" autocomplete="off"> -->
          <label for="numero2">Segundo valor</label>
        </campo-dinámico>
        
        
      </div>
    </form>

 <center><button onclick="multiplicar()">CALCULA TU DISTANCIA</button></center>
 <script>
  function multiplicar(){
   var numero1 = document.getElementById("numero1").value;
   var numero2 = document.getElementById("numero2").value;

   var multiplicar = parseInt(numero1) * parseInt(numero2);

   document.writeln(multiplicar);

  }
 </script> 
    <footer>
      <p>
        <mi-footer></mi-footer>
      </p>
    </footer>

  </body>
</html>
